apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/konflux-ci/tekton-integration-catalog?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/cancel-in-progress: "false"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "pull_request" && ( "tasks/mapt-oci/kind-aws-spot/***".pathChanged()
      || ".tekton/mapt-provision-test-pull-request.yaml".pathChanged() )
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: mapt-provision-test
    appstudio.openshift.io/component: mapt-provision-test
    pipelines.appstudio.openshift.io/type: test
  name: mapt-provision-test-on-pull-request
  namespace: rh-konflux-devprod-tenant
spec:
  params:
  - name: git-url
    value: '{{source_url}}'
  - name: revision
    value: '{{revision}}'
  - name: cluster-id
    value: 'pr-{{pull_request_number}}-{{run_id}}'
  - name: mapt-arch
    value: 'x86_64'
  - name: mapt-cpus
    value: '1'
  - name: mapt-memory
    value: '1'
  - name: mapt-spot
    value: 'true'
  - name: mapt-spot-increase-rate
    value: '10'
  - name: mapt-timeout
    value: '15m'
  - name: aws-credentials-secret
    value: 'aws-credentials'
  - name: oci-credentials-secret
    value: 'konflux-test-infra'
  pipelineSpec:
    description: |
      This pipeline tests the mapt provision and deprovision tasks by creating a temporary Kind cluster on AWS
      and then cleaning it up. It validates the complete lifecycle of cluster provisioning using the Mapt CLI.
      
      This version is triggered on pull requests to validate changes to the mapt tasks.
      
      The pipeline:
      - Provisions a Kind cluster on AWS using spot instances
      - Validates the cluster is accessible
      - Deprovisions the cluster to ensure proper cleanup
      - Handles errors gracefully with proper cleanup
    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - description: Revision of the Source Repository
      name: revision
      type: string
    - description: Unique identifier for the test cluster
      name: cluster-id
      type: string
    - description: Architecture for the Kind cluster (x86_64 or arm64)
      name: mapt-arch
      type: string
    - description: Number of vCPUs for the Kind cluster
      name: mapt-cpus
      type: string
    - description: Memory in GiB for the Kind cluster
      name: mapt-memory
      type: string
    - description: Use spot instances for cost optimization
      name: mapt-spot
      type: string
    - description: Spot price increase rate percentage
      name: mapt-spot-increase-rate
      type: string
    - description: Timeout for cluster operations
      name: mapt-timeout
      type: string
    - description: Kubernetes secret containing AWS credentials
      name: aws-credentials-secret
      type: string
    - description: Kubernetes secret containing OCI credentials
      name: oci-credentials-secret
      type: string
    tasks:
    - name: checkout
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      taskRef:
        name: git-clone
        kind: ClusterTask
    - name: mapt-provision
      runAfter: ["checkout"]
      params:
      - name: secret-aws-credentials
        value: $(params.aws-credentials-secret)
      - name: id
        value: $(params.cluster-id)
      - name: ownerName
        value: $(context.pipelineRun.name)
      - name: ownerUid
        value: $(context.pipelineRun.uid)
      - name: arch
        value: $(params.mapt-arch)
      - name: cpus
        value: $(params.mapt-cpus)
      - name: memory
        value: $(params.mapt-memory)
      - name: spot
        value: $(params.mapt-spot)
      - name: spot-increase-rate
        value: $(params.mapt-spot-increase-rate)
      - name: timeout
        value: $(params.mapt-timeout)
      - name: tags
        value: "created-by=tekton-pipeline,test-run=$(context.pipelineRun.name),pr=$(context.pipelineRun.labels['pipelinesascode.tekton.dev/pull-request'])"
      - name: oci-ref
        value: "not-used"
      taskRef:
        name: kind-aws-provision
        kind: Task
      workspaces:
      - name: source
        workspace: source
    - name: validate-cluster
      runAfter: ["mapt-provision"]
      params:
      - name: args
        value: 
        - "get"
        - "nodes"
        - "--kubeconfig=/credentials/kubeconfig"
      - name: script
        value: |
          #!/bin/bash
          set -e
          
          # Wait for the cluster to be ready
          echo "Waiting for Kind cluster to be ready..."
          timeout 300s bash -c "while ! kubectl get nodes --kubeconfig=/credentials/kubeconfig >/dev/null 2>/dev/null; do printf '.'; sleep 10; done"
          
          # Validate cluster is accessible
          echo "Validating cluster connectivity..."
          kubectl get nodes --kubeconfig=/credentials/kubeconfig
          kubectl get pods --all-namespaces --kubeconfig=/credentials/kubeconfig
          
          echo "Cluster validation successful!"
      taskRef:
        name: kubectl
        kind: ClusterTask
      workspaces:
      - name: source
        workspace: source
      volumes:
      - name: credentials-volume
        secret:
          secretName: $(tasks.mapt-provision.results.cluster-access-secret)
      stepTemplate:
        env:
        - name: KUBECONFIG
          value: '/credentials/kubeconfig'
        volumeMounts:
        - name: credentials-volume
          mountPath: /credentials
    - name: mapt-deprovision
      runAfter: ["validate-cluster"]
      params:
      - name: secret-aws-credentials
        value: $(params.aws-credentials-secret)
      - name: id
        value: $(params.cluster-id)
      - name: cluster-access-secret
        value: $(tasks.mapt-provision.results.cluster-access-secret)
      - name: oci-container
        value: "not-used-in-successful-run"
      - name: oci-credentials
        value: $(params.oci-credentials-secret)
      - name: force-destroy
        value: "true"
      taskRef:
        name: kind-aws-deprovision
        kind: Task
      workspaces:
      - name: source
        workspace: source
    finally:
    - name: cleanup-on-failure
      when:
      - input: $(tasks.mapt-provision.status)
        operator: in
        values: ["Failed", "Cancelled"]
      - input: $(tasks.validate-cluster.status)
        operator: in
        values: ["Failed", "Cancelled"]
      params:
      - name: secret-aws-credentials
        value: $(params.aws-credentials-secret)
      - name: id
        value: $(params.cluster-id)
      - name: cluster-access-secret
        value: $(tasks.mapt-provision.results.cluster-access-secret)
      - name: oci-container
        value: "cleanup-run"
      - name: oci-credentials
        value: $(params.oci-credentials-secret)
      - name: force-destroy
        value: "true"
      taskRef:
        name: kind-aws-deprovision
        kind: Task
      workspaces:
      - name: source
        workspace: source
    workspaces:
    - name: source
      workspace: source
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi