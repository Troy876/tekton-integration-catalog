---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sprayproxy-register-server
  labels:
    app.kubernetes.io/version: "0.1"
    upstream-usable: "false"
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: konflux
spec:
  description: |
    The `sprayproxy-register-server` Task is responsible for registering the Pipelines as Code server in SprayProxy server.
    This task logs into an ephemeral OpenShift cluster using a provided login command, retrieves the PAC controller's webhook URL,
    and sends this information to the SprayProxy server for registration. The task attempts the registration multiple times if needed
    and verifies the registration by listing the registered PAC servers on the SprayProxy server.
  params:
    - name: ocp-login-command
      type: string
      description: The OpenShift login command used to authenticate to the cluster.
  steps:
    - name: provision
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      env:
        - name: SPRAYPROXY_SERVER_TOKEN
          valueFrom:
            secretKeyRef:
              name: "sprayproxy-auth"
              key: "server-token"
        - name: SPRAYPROXY_SERVER_URL
          valueFrom:
            secretKeyRef:
              name: "sprayproxy-auth"
              key: "server-url"
      script: |
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail

        echo -e "INFO: Login to ephemeral cluster..."
        $(params.ocp-login-command)

        export WEBHOOK_URL=https://"$(oc get route pipelines-as-code-controller -n openshift-pipelines -o jsonpath='{.spec.host}')"

        register_pac_server(){
          echo "Start registering PAC server [$WEBHOOK_URL] to SprayProxy server"
          for _ in {1..5}; do
            if curl -k -X POST -H "Authorization: Bearer ${SPRAYPROXY_SERVER_TOKEN}" "${SPRAYPROXY_SERVER_URL}"/backends --data '{"url": "'"$WEBHOOK_URL"'"}'; then
              break
            fi
            sleep 5
          done
        }

        list_pac_server(){
          echo "List PAC server from SprayProxy server"
          for _ in {1..5}; do
            if curl -k -X GET -H "Authorization: Bearer ${SPRAYPROXY_SERVER_TOKEN}" "${SPRAYPROXY_SERVER_URL}"/backends; then
              break
            fi
            sleep 5
          done
        }

        register_pac_server
        list_pac_server
